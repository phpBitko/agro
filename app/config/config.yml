imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: services.yml }
    - { resource: doctrine_extensions.yml }
    - { resource: "@kmdaBundle/Resources/config/services.yml" }

# Put parameters here that don't need to change on each machine where the app is deployed
# http://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: uk
assetic:
    debug:          "%kernel.debug%"
    use_controller: false
#    bundles:        [ kmdaBundle ]
    filters:
        cssrewrite: ~
        
framework:
    translator: ~
    #esi:             ~
    #translator:      { fallbacks: ["%locale%"] }
    secret:          "%secret%"
    router:
        resource: "%kernel.root_dir%/config/routing.yml"
        strict_requirements: ~
    form:            ~
    csrf_protection: ~
    validation:      { enable_annotations: true }
    #serializer:      { enable_annotations: true }
    serializer:
        enabled: true
        cache: serializer.mapping.cache.apc
    templating:
        engines: ['twig']
    default_locale:  "%locale%"
    trusted_hosts:   ~
    trusted_proxies: ~
    session:
        # handler_id set to null will use default session handler from php.ini
        handler_id:  ~
    fragments:       ~
    http_method_override: true

# Twig Configuration
twig:
    debug:            "%kernel.debug%"
    strict_variables: "%kernel.debug%"
    form:
        resources: ['bootstrap_3_layout.html.twig', 'SonataCoreBundle:Form:datepicker.html.twig', 'ShtumiUsefulBundle::fields.html.twig']
        # resources: ['bootstrap_3_horizontal_layout.html.twig']
# Doctrine Configuration
doctrine:
    dbal:
        driver:   pdo_pgsql
        host:     "%database_host%"
        port:     "%database_port%"
        dbname:   "%database_name%"
        user:     "%database_user%"
        password: "%database_password%"
        charset:  UTF8
        types:
          json: Sonata\Doctrine\Types\JsonType  
          geometry:   CrEOF\Spatial\DBAL\Types\GeometryType
          point:      CrEOF\Spatial\DBAL\Types\Geometry\PointType
          polygon:    CrEOF\Spatial\DBAL\Types\Geometry\PolygonType
          linestring: CrEOF\Spatial\DBAL\Types\Geometry\LineStringType
        # if using pdo_sqlite as your database driver:
        #   1. add the path in parameters.yml
        #     e.g. database_path: "%kernel.root_dir%/data/data.db3"
        #   2. Uncomment database_path in parameters.yml.dist
        #   3. Uncomment next line:
        #     path:     "%database_path%"

#    orm:
#        auto_generate_proxy_classes: "%kernel.debug%"
#        naming_strategy: doctrine.orm.naming_strategy.underscore
#        auto_mapping: true
    orm:
        auto_generate_proxy_classes: "%kernel.debug%"
        entity_managers:
          default:
            dql:
                numeric_functions:
                    numeric_functions:
                    st_contains:     CrEOF\Spatial\ORM\Query\AST\Functions\PostgreSql\STContains
                    contains:     CrEOF\Spatial\ORM\Query\AST\Functions\PostgreSql\Contains
                    st_area:         CrEOF\Spatial\ORM\Query\AST\Functions\PostgreSql\STArea
                    st_geomfromtext: CrEOF\Spatial\ORM\Query\AST\Functions\PostgreSql\STGeomFromText
                    st_intersects:     CrEOF\Spatial\ORM\Query\AST\Functions\PostgreSql\STIntersects
                    st_buffer:     CrEOF\Spatial\ORM\Query\AST\Functions\PostgreSql\STBuffer
                    point: CrEOF\Spatial\ORM\Query\AST\Functions\PostgreSql\Point
                    st_makebox2d: CrEOF\Spatial\ORM\Query\AST\Functions\PostgreSql\STMakeBox2D
            auto_mapping: true
#            metadata_cache_driver: 
#                type: apc
#            query_cache_driver:
#                type: apc

# Swiftmailer Configuration
swiftmailer:
    transport: "%mailer_transport%"
    host:      "%mailer_host%"
    username:  "%mailer_user%"
    password:  "%mailer_password%"
    spool:     { type: memory }

sonata_block:
  default_contexts: [cms]
  blocks:
    # Enable the SonataAdminBundle block
    sonata.admin.block.admin_list:
      contexts:  [admin]
    sonata.user.block.menu:  # used to display the menu in profile pages
    sonata.user.block.account: # used to display menu option (login option)
    sonata.block.service.text: # used to if you plan to use Sonata user routes


sonata_user:
  #security_acl: true # Uncomment for ACL support
  manager_type: orm # can be orm or mongodb
   

fos_user:
  db_driver:  orm # can be orm or odm
  firewall_name:  main
  user_class:  Application\Sonata\UserBundle\Entity\User

  group:
    group_class:  Application\Sonata\UserBundle\Entity\Group
    group_manager: sonata.user.orm.group_manager  

  service:
    user_manager: sonata.user.orm.user_manager  
    
sonata_admin:
    title: Мiсто
    title_logo: /bundles/sonataadmin/27088828.png
    
fos_rest:
    body_listener: true
    view:
      view_response_listener: true
    serializer:
        serialize_null: true
#    body_converter:
#        enabled: true
#        format_listener:
#        rules:
#            - { path: '^/api',  priorities: ['json'], fallback_format: json, exception_fallback_format: html, prefer_extension: true }
##            - { path: '^/', priorities: [ 'html', '*/*'], fallback_format: html, prefer_extension: true }
lexik_jwt_authentication:
    private_key_path: "%kernel.root_dir%/var/jwt/private.pem"
    public_key_path:  "%kernel.root_dir%/var/jwt/public.pem"
    pass_phrase:      "cguhq1"
    token_ttl:        86400
shtumi_useful :
    dependent_filtered_entities:
        num_by_street:
            class: kmdaBundle:AddrNumber
            parent_property: Street
            property: addrNumber
#            role: ROLE_USER
            no_result_msg: 'номера не знайдено на цій вулиці'
#            order_property: title
#            order_direction: ASC
    autocomplete_entities:
        organizations:
            class: kmdaBundle:Organization
            property: fullName
            search: contains
#lexik_workflow:
#    processes:
#        rentdocument_publication:
#            start: draft_created
#            end:   [ deleted ]
#            steps:
#                draft_created:
#                    label: "Draft created"
#                    roles: [ ROLE_USER ]
#                    model_status: [ setStatus, kmdaBundle\Entity\RentDocument::STATUS_DRAFT ]
#                    next_states:
#                        validate: { type: step, target: validated_by_admin } # you can omit "type: step" as "step" is the default value of the "type" node. Soon, you'll be able to use "type: process".
#
#                validated_by_admin:
#                    label: "Post validated"
#                    roles: [ ROLE_ADMIN ]
#                    model_status: [ setStatus, kmdaBundle\Entity\RentDocument::STATUS_VALIDATED ]
#                    next_states:
#                        publish: { target: published }
knp_snappy:  
    pdf:
        enabled:    true
        binary:     %kernel.root_dir%/../vendor/h4cc/wkhtmltopdf-amd64/bin/wkhtmltopdf-amd64
lexik_workflow:
    processes:
        orenda_agreement:
            start: application_created
            end: [ application_closed ]
            steps:
                application_created:
                    label: "OrendaDoc Created"
                    roles: [ROLE_APPLICANT]
                    model_status: [ setStatus, kmdaBundle\WorkFlow\Model\OrendaDocModel::STATUS_DRAFT ]
                    next_states:
#                            go_to_next_step:
#                                type: step_or
#                                target:
#                                    delete: { target: deleted }
#                        published: { target: published } 
#                        deleted: { target: deleted }     
                        used: { target: used }
                used:
                    label: "Used to new meeting"
                    roles: [ROLE_SECRETAR]
                    model_status: [ setStatus, kmdaBundle\WorkFlow\Model\OrendaDocModel::STATUS_USED ]
                    next_states:
                        published: { target: published }
                        deleted: { target: deleted }
       
                published:
                    label: "OrendaDoc Publish to Meeting"
                    roles: [ROLE_GOLOVA]
                    model_status: [ setStatus, kmdaBundle\WorkFlow\Model\OrendaDocModel::STATUS_PUBLISHED ]   
                    next_states:
                        application_closed: { target: application_closed } 
                                                
                deleted:
                    label: "OrendaDoc delete from Meeting"
                    roles: [ROLE_GOLOVA,ROLE_SECRETAR]
                    model_status: [ setStatus, kmdaBundle\WorkFlow\Model\OrendaDocModel::STATUS_DELETED ]   
                    next_states:
                        used: { target: used }  
                        
                application_closed:
                    label: "OrendaDoc Agreement"
                    roles: [ROLE_SECRETAR]
                    model_status: [ setStatus, kmdaBundle\WorkFlow\Model\OrendaDocModel::STATUS_AGREEMENT ]  
                    next_states: ~